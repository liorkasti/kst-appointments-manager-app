{"ast":null,"code":"var _s = $RefreshSig$();\n// @ts-nocheck\nimport dayjs from 'dayjs';\nimport { useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { useUser } from '../../user/hooks/useUser';\nimport { getMonthYearDetails, getNewMonthYear } from './monthYear';\n\n// for useQuery call\nasync function getAppointments(year, month) {\n  const {\n    data\n  } = await axiosInstance.get(`/appointments/${year}/${month}`);\n  return data;\n}\n\n// types for hook return object\n\n// The purpose of this hook:\n//   1. track the current month/year (aka monthYear) selected by the user\n//     1a. provide a way to update state\n//   2. return the appointments for that particular monthYear\n//     2a. return in AppointmentDateMap format (appointment arrays indexed by day of month)\n//     2b. prefetch the appointments for adjacent monthYears\n//   3. track the state of the filter (all appointments / available appointments)\n//     3a. return the only the applicable appointments for the current monthYear\nexport function useAppointments() {\n  _s();\n  /** ****************** START 1: monthYear state *********************** */\n  // get the monthYear for the current date (for default monthYear state)\n  const currentMonthYear = getMonthYearDetails(dayjs());\n\n  // state to track current monthYear chosen by user\n  // state value is returned in hook return object\n  const [monthYear, setMonthYear] = useState(currentMonthYear);\n\n  // setter to update monthYear obj in state when user changes month in view,\n  // returned in hook return object\n  function updateMonthYear(monthIncrement) {\n    setMonthYear(prevData => getNewMonthYear(prevData, monthIncrement));\n  }\n  /** ****************** END 1: monthYear state ************************* */\n  /** ****************** START 2: filter appointments  ****************** */\n  // State and functions for filtering appointments to show all or only available\n  const [showAll, setShowAll] = useState(false);\n\n  // We will need imported function getAvailableAppointments here\n  // We need the user to pass to getAvailableAppointments so we can show\n  //   appointments that the logged-in user has reserved (in white)\n  const {\n    user\n  } = useUser();\n\n  /** ****************** END 2: filter appointments  ******************** */\n  /** ****************** START 3: useQuery  ***************************** */\n  // useQuery call for appointments for the current monthYear\n\n  // TODO: update with useQuery!\n  // Notes:\n  //    1. appointments is an AppointmentDateMap (object with days of month\n  //       as properties, and arrays of appointments for that day as values)\n  //\n  //    2. The getAppointments query function needs monthYear.year and\n  //       monthYear.month\n  const fallback = [];\n  const {\n    data: appointments = fallback\n  } = useQuery(queryKey.appointments, () => getAppointments(monthYear.year, monthYear.month));\n\n  /** ****************** END 3: useQuery  ******************************* */\n\n  return {\n    appointments,\n    monthYear,\n    updateMonthYear,\n    showAll,\n    setShowAll\n  };\n}\n_s(useAppointments, \"uYMgtpaDuXunqzzSbINlHFIf6vw=\", false, function () {\n  return [useUser, useQuery];\n});","map":{"version":3,"names":["dayjs","useState","useQuery","axiosInstance","useUser","getMonthYearDetails","getNewMonthYear","getAppointments","year","month","data","get","useAppointments","_s","currentMonthYear","monthYear","setMonthYear","updateMonthYear","monthIncrement","prevData","showAll","setShowAll","user","fallback","appointments","queryKey"],"sources":["C:/Users/kasti/workspace/REACT-QUERY/base-lazy-days/client/src/components/appointments/hooks/useAppointments.ts"],"sourcesContent":["// @ts-nocheck\r\nimport dayjs from 'dayjs';\r\nimport { Dispatch, SetStateAction, useState } from 'react';\r\nimport { useQuery, useQueryClient } from 'react-query';\r\n\r\nimport { axiosInstance } from '../../../axiosInstance';\r\nimport { queryKeys } from '../../../react-query/constants';\r\nimport { useUser } from '../../user/hooks/useUser';\r\nimport { AppointmentDateMap } from '../types';\r\nimport { getAvailableAppointments } from '../utils';\r\nimport { getMonthYearDetails, getNewMonthYear, MonthYear } from './monthYear';\r\n\r\n// for useQuery call\r\nasync function getAppointments(\r\n  year: string,\r\n  month: string,\r\n): Promise<AppointmentDateMap> {\r\n  const { data } = await axiosInstance.get(`/appointments/${year}/${month}`);\r\n  return data;\r\n}\r\n\r\n// types for hook return object\r\ninterface UseAppointments {\r\n  appointments: AppointmentDateMap;\r\n  monthYear: MonthYear;\r\n  updateMonthYear: (monthIncrement: number) => void;\r\n  showAll: boolean;\r\n  setShowAll: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\n// The purpose of this hook:\r\n//   1. track the current month/year (aka monthYear) selected by the user\r\n//     1a. provide a way to update state\r\n//   2. return the appointments for that particular monthYear\r\n//     2a. return in AppointmentDateMap format (appointment arrays indexed by day of month)\r\n//     2b. prefetch the appointments for adjacent monthYears\r\n//   3. track the state of the filter (all appointments / available appointments)\r\n//     3a. return the only the applicable appointments for the current monthYear\r\nexport function useAppointments(): UseAppointments {\r\n  /** ****************** START 1: monthYear state *********************** */\r\n  // get the monthYear for the current date (for default monthYear state)\r\n  const currentMonthYear = getMonthYearDetails(dayjs());\r\n\r\n  // state to track current monthYear chosen by user\r\n  // state value is returned in hook return object\r\n  const [monthYear, setMonthYear] = useState(currentMonthYear);\r\n\r\n  // setter to update monthYear obj in state when user changes month in view,\r\n  // returned in hook return object\r\n  function updateMonthYear(monthIncrement: number): void {\r\n    setMonthYear((prevData) => getNewMonthYear(prevData, monthIncrement));\r\n  }\r\n  /** ****************** END 1: monthYear state ************************* */\r\n  /** ****************** START 2: filter appointments  ****************** */\r\n  // State and functions for filtering appointments to show all or only available\r\n  const [showAll, setShowAll] = useState(false);\r\n\r\n  // We will need imported function getAvailableAppointments here\r\n  // We need the user to pass to getAvailableAppointments so we can show\r\n  //   appointments that the logged-in user has reserved (in white)\r\n  const { user } = useUser();\r\n\r\n  /** ****************** END 2: filter appointments  ******************** */\r\n  /** ****************** START 3: useQuery  ***************************** */\r\n  // useQuery call for appointments for the current monthYear\r\n\r\n  // TODO: update with useQuery!\r\n  // Notes:\r\n  //    1. appointments is an AppointmentDateMap (object with days of month\r\n  //       as properties, and arrays of appointments for that day as values)\r\n  //\r\n  //    2. The getAppointments query function needs monthYear.year and\r\n  //       monthYear.month\r\n  const fallback = [];\r\n  const { data: appointments = fallback } = useQuery(\r\n    queryKey.appointments,\r\n    () => getAppointments(monthYear.year, monthYear.month),\r\n  );\r\n\r\n  /** ****************** END 3: useQuery  ******************************* */\r\n\r\n  return { appointments, monthYear, updateMonthYear, showAll, setShowAll };\r\n}\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAmCC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,QAAQ,QAAwB,aAAa;AAEtD,SAASC,aAAa,QAAQ,wBAAwB;AAEtD,SAASC,OAAO,QAAQ,0BAA0B;AAGlD,SAASC,mBAAmB,EAAEC,eAAe,QAAmB,aAAa;;AAE7E;AACA,eAAeC,eAAeA,CAC5BC,IAAY,EACZC,KAAa,EACgB;EAC7B,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMP,aAAa,CAACQ,GAAG,CAAE,iBAAgBH,IAAK,IAAGC,KAAM,EAAC,CAAC;EAC1E,OAAOC,IAAI;AACb;;AAEA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,eAAeA,CAAA,EAAoB;EAAAC,EAAA;EACjD;EACA;EACA,MAAMC,gBAAgB,GAAGT,mBAAmB,CAACL,KAAK,CAAC,CAAC,CAAC;;EAErD;EACA;EACA,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAACa,gBAAgB,CAAC;;EAE5D;EACA;EACA,SAASG,eAAeA,CAACC,cAAsB,EAAQ;IACrDF,YAAY,CAAEG,QAAQ,IAAKb,eAAe,CAACa,QAAQ,EAAED,cAAc,CAAC,CAAC;EACvE;EACA;EACA;EACA;EACA,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA;EACA;EACA,MAAM;IAAEqB;EAAK,CAAC,GAAGlB,OAAO,CAAC,CAAC;;EAE1B;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMmB,QAAQ,GAAG,EAAE;EACnB,MAAM;IAAEb,IAAI,EAAEc,YAAY,GAAGD;EAAS,CAAC,GAAGrB,QAAQ,CAChDuB,QAAQ,CAACD,YAAY,EACrB,MAAMjB,eAAe,CAACQ,SAAS,CAACP,IAAI,EAAEO,SAAS,CAACN,KAAK,CACvD,CAAC;;EAED;;EAEA,OAAO;IAAEe,YAAY;IAAET,SAAS;IAAEE,eAAe;IAAEG,OAAO;IAAEC;EAAW,CAAC;AAC1E;AAACR,EAAA,CA5CeD,eAAe;EAAA,QAsBZR,OAAO,EAckBF,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}