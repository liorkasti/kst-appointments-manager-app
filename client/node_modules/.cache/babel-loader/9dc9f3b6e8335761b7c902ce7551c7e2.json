{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { useUser } from '../../user/hooks/useUser';\n\n// for when we need functions for useMutation\n// async function setAppointmentUser(\n//   appointment: Appointment,\n//   userId: number | undefined,\n// ): Promise<void> {\n//   if (!userId) return;\n//   const patchOp = appointment.userId ? 'replace' : 'add';\n//   const patchData = [{ op: patchOp, path: '/userId', value: userId }];\n//   await axiosInstance.patch(`/appointment/${appointment.id}`, {\n//     data: patchData,\n//   });\n// }\n\n// TODO: update type for React Query mutate function\n\nexport function useReserveAppointment() {\n  _s();\n  const {\n    user\n  } = useUser();\n  const toast = useCustomToast();\n\n  // TODO: replace with mutate function\n  return appointment => {\n    // nothing to see here\n  };\n}\n_s(useReserveAppointment, \"+8JxIQxq+XI6cW5qdfZ8Mghji60=\", false, function () {\n  return [useUser, useCustomToast];\n});","map":{"version":3,"names":["useCustomToast","useUser","useReserveAppointment","_s","user","toast","appointment"],"sources":["C:/Users/kasti/workspace/REACT-QUERY/base-lazy-days/client/src/components/appointments/hooks/useReserveAppointment.ts"],"sourcesContent":["import { Appointment } from '../../../../../shared/types';\r\nimport { axiosInstance } from '../../../axiosInstance';\r\nimport { queryKeys } from '../../../react-query/constants';\r\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\r\nimport { useUser } from '../../user/hooks/useUser';\r\n\r\n// for when we need functions for useMutation\r\n// async function setAppointmentUser(\r\n//   appointment: Appointment,\r\n//   userId: number | undefined,\r\n// ): Promise<void> {\r\n//   if (!userId) return;\r\n//   const patchOp = appointment.userId ? 'replace' : 'add';\r\n//   const patchData = [{ op: patchOp, path: '/userId', value: userId }];\r\n//   await axiosInstance.patch(`/appointment/${appointment.id}`, {\r\n//     data: patchData,\r\n//   });\r\n// }\r\n\r\n// TODO: update type for React Query mutate function\r\ntype AppointmentMutationFunction = (appointment: Appointment) => void;\r\n\r\nexport function useReserveAppointment(): AppointmentMutationFunction {\r\n  const { user } = useUser();\r\n  const toast = useCustomToast();\r\n\r\n  // TODO: replace with mutate function\r\n  return (appointment: Appointment) => {\r\n    // nothing to see here\r\n  };\r\n}\r\n"],"mappings":";AAGA,SAASA,cAAc,QAAQ,gCAAgC;AAC/D,SAASC,OAAO,QAAQ,0BAA0B;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAO,SAASC,qBAAqBA,CAAA,EAAgC;EAAAC,EAAA;EACnE,MAAM;IAAEC;EAAK,CAAC,GAAGH,OAAO,EAAE;EAC1B,MAAMI,KAAK,GAAGL,cAAc,EAAE;;EAE9B;EACA,OAAQM,WAAwB,IAAK;IACnC;EAAA,CACD;AACH;AAACH,EAAA,CAReD,qBAAqB;EAAA,QAClBD,OAAO,EACVD,cAAc;AAAA"},"metadata":{},"sourceType":"module"}