{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useUser } from './useUser';\n\n// for when we need a server function\n// async function patchUserOnServer(\n//   newData: User | null,\n//   originalData: User | null,\n//  ): Promise<User | null> {\n//   if (!newData || !originalData) return null;\n//   // create a patch for the difference between newData and originalData\n//   const patch = jsonpatch.compare(originalData, newData);\n\n//   // send patched data to the server\n//   const { data } = await axiosInstance.patch(\n//     `/user/${originalData.id}`,\n//     { patch },\n//     {\n//       headers: getJWTHeader(originalData),\n//     },\n//   );\n//   return data.user;\n//  }\n\n// TODO: update type to UseMutateFunction type\nexport function usePatchUser() {\n  _s();\n  const {\n    user,\n    updateUser\n  } = useUser();\n\n  // TODO: replace with mutate function\n  const patchUser = newData => {\n    // nothing to see here\n  };\n  return patchUser;\n}\n_s(usePatchUser, \"GrAkLOK93jden7TqC8fz7XlBo2g=\", false, function () {\n  return [useUser];\n});","map":{"version":3,"names":["useUser","usePatchUser","_s","user","updateUser","patchUser","newData"],"sources":["C:/Users/kasti/workspace/REACT-QUERY/base-lazy-days/client/src/components/user/hooks/usePatchUser.ts"],"sourcesContent":["import jsonpatch from 'fast-json-patch';\r\n\r\nimport type { User } from '../../../../../shared/types';\r\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\r\nimport { useUser } from './useUser';\r\n\r\n// for when we need a server function\r\n// async function patchUserOnServer(\r\n//   newData: User | null,\r\n//   originalData: User | null,\r\n//  ): Promise<User | null> {\r\n//   if (!newData || !originalData) return null;\r\n//   // create a patch for the difference between newData and originalData\r\n//   const patch = jsonpatch.compare(originalData, newData);\r\n\r\n//   // send patched data to the server\r\n//   const { data } = await axiosInstance.patch(\r\n//     `/user/${originalData.id}`,\r\n//     { patch },\r\n//     {\r\n//       headers: getJWTHeader(originalData),\r\n//     },\r\n//   );\r\n//   return data.user;\r\n//  }\r\n\r\n// TODO: update type to UseMutateFunction type\r\nexport function usePatchUser(): (newData: User | null) => void {\r\n  const { user, updateUser } = useUser();\r\n\r\n  // TODO: replace with mutate function\r\n  const patchUser = (newData: User | null) => {\r\n    // nothing to see here\r\n  };\r\n\r\n  return patchUser;\r\n}\r\n"],"mappings":";AAIA,SAASA,OAAO,QAAQ,WAAW;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,SAASC,YAAYA,CAAA,EAAmC;EAAAC,EAAA;EAC7D,MAAM;IAAEC,IAAI;IAAEC;EAAW,CAAC,GAAGJ,OAAO,EAAE;;EAEtC;EACA,MAAMK,SAAS,GAAIC,OAAoB,IAAK;IAC1C;EAAA,CACD;EAED,OAAOD,SAAS;AAClB;AAACH,EAAA,CATeD,YAAY;EAAA,QACGD,OAAO;AAAA"},"metadata":{},"sourceType":"module"}