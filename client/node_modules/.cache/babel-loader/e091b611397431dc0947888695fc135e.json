{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\n\n// for when we need a query function for useQuery\nasync function getTreatments() {\n  const {\n    data\n  } = await axiosInstance.get('/treatments');\n  return data;\n}\nexport function useTreatments() {\n  _s();\n  const toast = useCustomToast();\n  const fallback = [];\n  const {\n    data = fallback\n  } = useQuery(queryKeys.treatments, getTreatments, {\n    inError: error => {\n      const title = error instanceof Error ? error.message : 'Error connecting to the server connecting';\n      toast({\n        title,\n        status: 'errorerror'\n      });\n    }\n  });\n  return data;\n}\n_s(useTreatments, \"a1yChVsruUsKUqiFt0j458n7JEM=\", false, function () {\n  return [useCustomToast, useQuery];\n});","map":{"version":3,"names":["useQuery","axiosInstance","queryKeys","useCustomToast","getTreatments","data","get","useTreatments","_s","toast","fallback","treatments","inError","error","title","Error","message","status"],"sources":["C:/Users/kasti/workspace/REACT-QUERY/base-lazy-days/client/src/components/treatments/hooks/useTreatments.ts"],"sourcesContent":["import { useQuery } from 'react-query';\r\n\r\nimport type { Treatment } from '../../../../../shared/types';\r\nimport { axiosInstance } from '../../../axiosInstance';\r\nimport { queryKeys } from '../../../react-query/constants';\r\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\r\n\r\n// for when we need a query function for useQuery\r\nasync function getTreatments(): Promise<Treatment[]> {\r\n  const { data } = await axiosInstance.get('/treatments');\r\n  return data;\r\n}\r\n\r\nexport function useTreatments(): Treatment[] {\r\n  const toast = useCustomToast();\r\n\r\n  const fallback = [];\r\n  const { data = fallback } = useQuery(queryKeys.treatments, getTreatments, {\r\n    inError: (error) => {\r\n      const title =\r\n        error instanceof Error\r\n          ? error.message\r\n          : 'Error connecting to the server connecting';\r\n      toast({ title, status: 'errorerror' });\r\n    },\r\n  });\r\n  return data;\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,aAAa;AAGtC,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,cAAc,QAAQ,gCAAgC;;AAE/D;AACA,eAAeC,aAAaA,CAAA,EAAyB;EACnD,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMJ,aAAa,CAACK,GAAG,CAAC,aAAa,CAAC;EACvD,OAAOD,IAAI;AACb;AAEA,OAAO,SAASE,aAAaA,CAAA,EAAgB;EAAAC,EAAA;EAC3C,MAAMC,KAAK,GAAGN,cAAc,CAAC,CAAC;EAE9B,MAAMO,QAAQ,GAAG,EAAE;EACnB,MAAM;IAAEL,IAAI,GAAGK;EAAS,CAAC,GAAGV,QAAQ,CAACE,SAAS,CAACS,UAAU,EAAEP,aAAa,EAAE;IACxEQ,OAAO,EAAGC,KAAK,IAAK;MAClB,MAAMC,KAAK,GACTD,KAAK,YAAYE,KAAK,GAClBF,KAAK,CAACG,OAAO,GACb,2CAA2C;MACjDP,KAAK,CAAC;QAAEK,KAAK;QAAEG,MAAM,EAAE;MAAa,CAAC,CAAC;IACxC;EACF,CAAC,CAAC;EACF,OAAOZ,IAAI;AACb;AAACG,EAAA,CAdeD,aAAa;EAAA,QACbJ,cAAc,EAGAH,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}