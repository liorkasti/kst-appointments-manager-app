{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from 'axios';\nimport { axiosInstance } from '../axiosInstance';\nimport { useCustomToast } from '../components/app/hooks/useCustomToast';\nimport { useUser } from '../components/user/hooks/useUser';\nexport function useAuth() {\n  _s();\n  const SERVER_ERROR = 'There was an error contacting the server.';\n  const toast = useCustomToast();\n  const {\n    clearUser,\n    updateUser\n  } = useUser();\n  async function authServerCall(urlEndpoint, email, password) {\n    try {\n      const {\n        data,\n        status\n      } = await axiosInstance({\n        url: urlEndpoint,\n        method: 'POST',\n        data: {\n          email,\n          password\n        },\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (status === 400) {\n        const title = 'message' in data ? data.message : 'Unauthorized';\n        toast({\n          title,\n          status: 'warning'\n        });\n        return;\n      }\n      if ('user' in data && 'token' in data.user) {\n        toast({\n          title: `Logged in as ${data.user.email}`,\n          status: 'info'\n        });\n\n        // update stored user data\n        updateUser(data.user);\n      }\n    } catch (errorResponse) {\n      var _errorResponse$respon, _errorResponse$respon2, _errorResponse$respon3, _errorResponse$respon4;\n      const title = axios.isAxiosError(errorResponse) && errorResponse !== null && errorResponse !== void 0 && (_errorResponse$respon = errorResponse.response) !== null && _errorResponse$respon !== void 0 && (_errorResponse$respon2 = _errorResponse$respon.data) !== null && _errorResponse$respon2 !== void 0 && _errorResponse$respon2.message ? errorResponse === null || errorResponse === void 0 ? void 0 : (_errorResponse$respon3 = errorResponse.response) === null || _errorResponse$respon3 === void 0 ? void 0 : (_errorResponse$respon4 = _errorResponse$respon3.data) === null || _errorResponse$respon4 === void 0 ? void 0 : _errorResponse$respon4.message : SERVER_ERROR;\n      toast({\n        title,\n        status: 'error'\n      });\n    }\n  }\n  async function signin(email, password) {\n    authServerCall('/signin', email, password);\n  }\n  async function signup(email, password) {\n    authServerCall('/user', email, password);\n  }\n  function signout() {\n    // clear user from stored user data\n    clearUser();\n    toast({\n      title: 'Logged out!',\n      status: 'info'\n    });\n  }\n\n  // Return the user object and auth methods\n  return {\n    signin,\n    signup,\n    signout\n  };\n}\n_s(useAuth, \"YkGiRRmMhuSlt1ZJ0zFyP+/aqIw=\", false, function () {\n  return [useCustomToast, useUser];\n});","map":{"version":3,"names":["axios","axiosInstance","useCustomToast","useUser","useAuth","_s","SERVER_ERROR","toast","clearUser","updateUser","authServerCall","urlEndpoint","email","password","data","status","url","method","headers","title","message","user","errorResponse","_errorResponse$respon","_errorResponse$respon2","_errorResponse$respon3","_errorResponse$respon4","isAxiosError","response","signin","signup","signout"],"sources":["C:/Users/kasti/workspace/REACT-QUERY/base-lazy-days/client/src/auth/useAuth.tsx"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\n\r\nimport { User } from '../../../shared/types';\r\nimport { axiosInstance } from '../axiosInstance';\r\nimport { useCustomToast } from '../components/app/hooks/useCustomToast';\r\nimport { useUser } from '../components/user/hooks/useUser';\r\n\r\ninterface UseAuth {\r\n  signin: (email: string, password: string) => Promise<void>;\r\n  signup: (email: string, password: string) => Promise<void>;\r\n  signout: () => void;\r\n}\r\n\r\ntype UserResponse = { user: User };\r\ntype ErrorResponse = { message: string };\r\ntype AuthResponseType = UserResponse | ErrorResponse;\r\n\r\nexport function useAuth(): UseAuth {\r\n  const SERVER_ERROR = 'There was an error contacting the server.';\r\n  const toast = useCustomToast();\r\n  const { clearUser, updateUser } = useUser();\r\n\r\n  async function authServerCall(\r\n    urlEndpoint: string,\r\n    email: string,\r\n    password: string,\r\n  ): Promise<void> {\r\n    try {\r\n      const { data, status }: AxiosResponse<AuthResponseType> =\r\n        await axiosInstance({\r\n          url: urlEndpoint,\r\n          method: 'POST',\r\n          data: { email, password },\r\n          headers: { 'Content-Type': 'application/json' },\r\n        });\r\n\r\n      if (status === 400) {\r\n        const title = 'message' in data ? data.message : 'Unauthorized';\r\n        toast({ title, status: 'warning' });\r\n        return;\r\n      }\r\n\r\n      if ('user' in data && 'token' in data.user) {\r\n        toast({\r\n          title: `Logged in as ${data.user.email}`,\r\n          status: 'info',\r\n        });\r\n\r\n        // update stored user data\r\n        updateUser(data.user);\r\n      }\r\n    } catch (errorResponse) {\r\n      const title =\r\n        axios.isAxiosError(errorResponse) &&\r\n        errorResponse?.response?.data?.message\r\n          ? errorResponse?.response?.data?.message\r\n          : SERVER_ERROR;\r\n      toast({\r\n        title,\r\n        status: 'error',\r\n      });\r\n    }\r\n  }\r\n\r\n  async function signin(email: string, password: string): Promise<void> {\r\n    authServerCall('/signin', email, password);\r\n  }\r\n  async function signup(email: string, password: string): Promise<void> {\r\n    authServerCall('/user', email, password);\r\n  }\r\n\r\n  function signout(): void {\r\n    // clear user from stored user data\r\n    clearUser();\r\n    toast({\r\n      title: 'Logged out!',\r\n      status: 'info',\r\n    });\r\n  }\r\n\r\n  // Return the user object and auth methods\r\n  return {\r\n    signin,\r\n    signup,\r\n    signout,\r\n  };\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAyB,OAAO;AAG5C,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,cAAc,QAAQ,wCAAwC;AACvE,SAASC,OAAO,QAAQ,kCAAkC;AAY1D,OAAO,SAASC,OAAOA,CAAA,EAAY;EAAAC,EAAA;EACjC,MAAMC,YAAY,GAAG,2CAA2C;EAChE,MAAMC,KAAK,GAAGL,cAAc,EAAE;EAC9B,MAAM;IAAEM,SAAS;IAAEC;EAAW,CAAC,GAAGN,OAAO,EAAE;EAE3C,eAAeO,cAAcA,CAC3BC,WAAmB,EACnBC,KAAa,EACbC,QAAgB,EACD;IACf,IAAI;MACF,MAAM;QAAEC,IAAI;QAAEC;MAAwC,CAAC,GACrD,MAAMd,aAAa,CAAC;QAClBe,GAAG,EAAEL,WAAW;QAChBM,MAAM,EAAE,MAAM;QACdH,IAAI,EAAE;UAAEF,KAAK;UAAEC;QAAS,CAAC;QACzBK,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB;MAChD,CAAC,CAAC;MAEJ,IAAIH,MAAM,KAAK,GAAG,EAAE;QAClB,MAAMI,KAAK,GAAG,SAAS,IAAIL,IAAI,GAAGA,IAAI,CAACM,OAAO,GAAG,cAAc;QAC/Db,KAAK,CAAC;UAAEY,KAAK;UAAEJ,MAAM,EAAE;QAAU,CAAC,CAAC;QACnC;MACF;MAEA,IAAI,MAAM,IAAID,IAAI,IAAI,OAAO,IAAIA,IAAI,CAACO,IAAI,EAAE;QAC1Cd,KAAK,CAAC;UACJY,KAAK,EAAG,gBAAeL,IAAI,CAACO,IAAI,CAACT,KAAM,EAAC;UACxCG,MAAM,EAAE;QACV,CAAC,CAAC;;QAEF;QACAN,UAAU,CAACK,IAAI,CAACO,IAAI,CAAC;MACvB;IACF,CAAC,CAAC,OAAOC,aAAa,EAAE;MAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MACtB,MAAMP,KAAK,GACTnB,KAAK,CAAC2B,YAAY,CAACL,aAAa,CAAC,IACjCA,aAAa,aAAbA,aAAa,gBAAAC,qBAAA,GAAbD,aAAa,CAAEM,QAAQ,cAAAL,qBAAA,gBAAAC,sBAAA,GAAvBD,qBAAA,CAAyBT,IAAI,cAAAU,sBAAA,eAA7BA,sBAAA,CAA+BJ,OAAO,GAClCE,aAAa,aAAbA,aAAa,wBAAAG,sBAAA,GAAbH,aAAa,CAAEM,QAAQ,cAAAH,sBAAA,wBAAAC,sBAAA,GAAvBD,sBAAA,CAAyBX,IAAI,cAAAY,sBAAA,uBAA7BA,sBAAA,CAA+BN,OAAO,GACtCd,YAAY;MAClBC,KAAK,CAAC;QACJY,KAAK;QACLJ,MAAM,EAAE;MACV,CAAC,CAAC;IACJ;EACF;EAEA,eAAec,MAAMA,CAACjB,KAAa,EAAEC,QAAgB,EAAiB;IACpEH,cAAc,CAAC,SAAS,EAAEE,KAAK,EAAEC,QAAQ,CAAC;EAC5C;EACA,eAAeiB,MAAMA,CAAClB,KAAa,EAAEC,QAAgB,EAAiB;IACpEH,cAAc,CAAC,OAAO,EAAEE,KAAK,EAAEC,QAAQ,CAAC;EAC1C;EAEA,SAASkB,OAAOA,CAAA,EAAS;IACvB;IACAvB,SAAS,EAAE;IACXD,KAAK,CAAC;MACJY,KAAK,EAAE,aAAa;MACpBJ,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,OAAO;IACLc,MAAM;IACNC,MAAM;IACNC;EACF,CAAC;AACH;AAAC1B,EAAA,CArEeD,OAAO;EAAA,QAEPF,cAAc,EACMC,OAAO;AAAA"},"metadata":{},"sourceType":"module"}