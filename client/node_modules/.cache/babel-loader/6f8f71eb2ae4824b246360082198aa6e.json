{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { clearStoredUser, setStoredUser } from '../../../user-storage';\nasync function getUser(user) {\n  if (!user) return null;\n  const {\n    data\n  } = await axiosInstance.get(`/user/${user.id}`, {\n    headers: getJWTHeader(user)\n  });\n  return data.user;\n}\nexport function useUser() {\n  _s();\n  // useQuery call to update user data from server\n  const queryClient = useQueryClient();\n  const {\n    data: user\n  } = useQuery(queryKeys.user, () => getUser(user), {\n    onSuccess: received => {\n      if (!received) {\n        clearStoredUser();\n      } else {\n        setStoredUser(received);\n      }\n    }\n  });\n  // const user = null;\n\n  // meant to be called from useAuth\n  function updateUser(newUser) {\n    // TODO: update the user in the query cache\n  }\n\n  // meant to be called from useAuth\n  function clearUser() {\n    // TODO: reset user to null in query cache\n  }\n  return {\n    user,\n    updateUser,\n    clearUser\n  };\n}\n_s(useUser, \"NmeRR1fLBB2wYNsHdaD9UXHQupU=\", false, function () {\n  return [useQueryClient, useQuery];\n});","map":{"version":3,"names":["useQuery","useQueryClient","axiosInstance","getJWTHeader","queryKeys","clearStoredUser","setStoredUser","getUser","user","data","get","id","headers","useUser","_s","queryClient","onSuccess","received","updateUser","newUser","clearUser"],"sources":["/Users/liorkastenbaum/Repos/kst-appointments-manager-app/client/src/components/user/hooks/useUser.ts"],"sourcesContent":["import { AxiosResponse } from 'axios';\n\nimport { useQuery, useQueryClient } from 'react-query';\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { clearStoredUser, setStoredUser } from '../../../user-storage';\n\nasync function getUser(user: User | null): Promise<User | null> {\n  if (!user) return null;\n  const { data }: AxiosResponse<{ user: User }> = await axiosInstance.get(\n    `/user/${user.id}`,\n    {\n      headers: getJWTHeader(user),\n    },\n  );\n  return data.user;\n}\n\ninterface UseUser {\n  user: User | null;\n  updateUser: (user: User) => void;\n  clearUser: () => void;\n}\n\nexport function useUser(): UseUser {\n  // useQuery call to update user data from server\n  const queryClient = useQueryClient();\n  const { data: user } = useQuery(queryKeys.user, () => getUser(user), {\n    onSuccess: (received: User | null) => {\n      if (!received) {\n        clearStoredUser();\n      } else {\n        setStoredUser(received);\n      }\n    },\n  });\n  // const user = null;\n\n  // meant to be called from useAuth\n  function updateUser(newUser: User): void {\n    // TODO: update the user in the query cache\n  }\n\n  // meant to be called from useAuth\n  function clearUser() {\n    // TODO: reset user to null in query cache\n  }\n\n  return { user, updateUser, clearUser };\n}\n"],"mappings":";AAEA,SAASA,QAAQ,EAAEC,cAAc,QAAQ,aAAa;AAEtD,SAASC,aAAa,EAAEC,YAAY,QAAQ,wBAAwB;AACpE,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,eAAe,EAAEC,aAAa,QAAQ,uBAAuB;AAEtE,eAAeC,OAAOA,CAACC,IAAiB,EAAwB;EAC9D,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;EACtB,MAAM;IAAEC;EAAoC,CAAC,GAAG,MAAMP,aAAa,CAACQ,GAAG,CACpE,SAAQF,IAAI,CAACG,EAAG,EAAC,EAClB;IACEC,OAAO,EAAET,YAAY,CAACK,IAAI;EAC5B,CACF,CAAC;EACD,OAAOC,IAAI,CAACD,IAAI;AAClB;AAQA,OAAO,SAASK,OAAOA,CAAA,EAAY;EAAAC,EAAA;EACjC;EACA,MAAMC,WAAW,GAAGd,cAAc,CAAC,CAAC;EACpC,MAAM;IAAEQ,IAAI,EAAED;EAAK,CAAC,GAAGR,QAAQ,CAACI,SAAS,CAACI,IAAI,EAAE,MAAMD,OAAO,CAACC,IAAI,CAAC,EAAE;IACnEQ,SAAS,EAAGC,QAAqB,IAAK;MACpC,IAAI,CAACA,QAAQ,EAAE;QACbZ,eAAe,CAAC,CAAC;MACnB,CAAC,MAAM;QACLC,aAAa,CAACW,QAAQ,CAAC;MACzB;IACF;EACF,CAAC,CAAC;EACF;;EAEA;EACA,SAASC,UAAUA,CAACC,OAAa,EAAQ;IACvC;EAAA;;EAGF;EACA,SAASC,SAASA,CAAA,EAAG;IACnB;EAAA;EAGF,OAAO;IAAEZ,IAAI;IAAEU,UAAU;IAAEE;EAAU,CAAC;AACxC;AAACN,EAAA,CAzBeD,OAAO;EAAA,QAEDZ,cAAc,EACXD,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}